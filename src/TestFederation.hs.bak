{-# LANGUAGE OverloadedStrings, TupleSections, PackageImports #-}

module TestFederation (
	Common(..),
	Tag(..),
	Requirement(..),
	Feature(..),
	MBody(..),
	Jid(..),
	MessageType(..),
	input, inputT,
	output, outputT,
	hlpDebug, hlpDebugT,
	) where

import "monads-tf" Control.Monad.State
import Data.Maybe
import Data.Pipe
import Data.Pipe.Basic
import Data.HandleLike
import Text.XML.Pipe

import XmppCommon
import HandlePipe

inputT :: (HandleLike h, MonadTrans t, Monad (t (HandleMonad h))) =>
	h -> Pipe () Common (t (HandleMonad h)) ()
inputT h = fromHandleLikeT h
	=$= xmlEvent
	=$= convert fromJust
	=$= xmlReborn
	=$= convert toCommon

input :: HandleLike h => h -> Pipe () Common (HandleMonad h) ()
input h = fromHandleLike h
	=$= xmlEvent
	=$= convert fromJust
	=$= xmlReborn
	=$= convert toCommon

outputT :: (HandleLike h, MonadTrans t, Monad (t (HandleMonad h))) =>
	h -> Pipe Common () (t (HandleMonad h)) ()
outputT h = (await >>=) . maybe (return ()) $ \n -> do
	lift (lift . hlPut h $ xmlString [fromCommon Server n]) >> case n of
		XCEnd -> lift . lift $ hlClose h
		_ -> outputT h

output :: HandleLike h => h -> Pipe Common () (HandleMonad h) ()
output h = (await >>=) . maybe (return ()) $ \n -> do
	lift (hlPut h $ xmlString [fromCommon Server n]) >> case n of
		XCEnd -> lift $ hlClose h
		_ -> output h
